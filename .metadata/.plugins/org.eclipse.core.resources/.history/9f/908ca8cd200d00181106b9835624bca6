package ag.threads;

import java.util.Arrays;

public class Semaphore {
	private int currentIndex = -1;
	private Object[] locks;
	
	private void init(int c){
		for (int i = 0; i < c; i++) {
			locks[i] = new Object();
		} 
	}
	
	public Semaphore(int capacity) {
		locks = new Object[capacity];
		init(capacity);
	}
	
	public void stop() throws InterruptedException{
		synchronized (locks) {
			System.out.println(currentIndex);
			if (currentIndex+1 < locks.length){
				System.out.println(locks[++currentIndex]);
				locks[++currentIndex].wait(); 
			} else {
				wait();
			}
		}
	}
	
	public void release(){
		synchronized (locks) {
			if (currentIndex > -1){
				locks[currentIndex--].notify();
			} else {
				notify();
			}
		}
	}
}

import java.util.Arrays;

import com.pubnub.api.PNConfiguration;
import com.pubnub.api.PubNub;
import com.pubnub.api.callbacks.PNCallback;
import com.pubnub.api.callbacks.SubscribeCallback;
import com.pubnub.api.enums.PNStatusCategory;
import com.pubnub.api.models.consumer.PNPublishResult;
import com.pubnub.api.models.consumer.PNStatus;
import com.pubnub.api.models.consumer.pubsub.PNMessageResult;
import com.pubnub.api.models.consumer.pubsub.PNPresenceEventResult;

public class Main {

	public static void main(String[] args) throws InterruptedException {
		//
	    PNConfiguration pnConfiguration = new PNConfiguration();
	    pnConfiguration.setSubscribeKey("sub-c-2876554e-030b-11e5-897f-02ee2ddab7fe");//ao receber mensagens
	    pnConfiguration.setPublishKey("pub-c-895aaf20-3f93-43bd-aa4f-6b08d6869d96");//ao enviar mensagens
	    pnConfiguration.setSecure(false);
	    //
	    PubNub pubnub = new PubNub(pnConfiguration);
	    //
	    pubnub.addListener(new SubscribeCallback() {
	        @Override
	        public void status(PubNub pubnub, PNStatus status) {
	 
	            if (status.getCategory() == PNStatusCategory.PNConnectedCategory) {
	 
	                // Connect event. You can do stuff like publish, and know you'll get it.
	                // Or just use the connected event to confirm you are subscribed for
	                // UI / internal notifications, etc
	             
	                if (status.getCategory() == PNStatusCategory.PNConnectedCategory){
	                    pubnub.publish().channel("ifpb-pdm").message("hello!!").async(new PNCallback<PNPublishResult>() {
	                        @Override
	                        public void onResponse(PNPublishResult result, PNStatus status) {
	                            // Check whether request successfully completed or not.
	                            if (!status.isError()) {
	                                // Message successfully published to specified channel.
	                            }
	                            // Request processing failed.
	                            else {
	 
	                                // Handle message publish error. Check 'category' property to find out possible issue
	                                // because of which request did fail.
	                                //
	                                // Request can be resent using: [status retry];
	                            }
	                        }
	                    });
	                }
	            }
	        }
	 
	        @Override
	        public void message(PubNub pubnub, PNMessageResult message) {
	            // Handle new message stored in message.message
	            if (message.getChannel() != null) {
	                // Message has been received on channel group stored in
	                // message.getChannel()
	            }
	            else {
	                // Message has been received on channel stored in
	                // message.getSubscription()
	            }
	            //
	            System.out.println(message.getMessage());
	 
	            /*
	                log the following items with your favorite logger
	                    - message.getMessage()
	                    - message.getSubscription()
	                    - message.getTimetoken()
	            */
	        }
	 
	        @Override
	        public void presence(PubNub pubnub, PNPresenceEventResult presence) {
	        }
	    });
	 
	    pubnub.subscribe().channels(Arrays.asList("ifpb-pdm")).execute();
	    //
	    Thread.sleep(5000);
	    //
	    pubnub.publish()
	    		.message(Arrays.asList("hello", "there"))
	    		.channel("ifpb-pdm")
		    .async(new PNCallback<PNPublishResult>() {
		        @Override
		        public void onResponse(PNPublishResult result, PNStatus status) {
		            // handle publish result, status always present, result if successful
		            // status.isError to see if error happened
		        		System.out.println(result.toString());
		        		System.out.println(status.getUuid());
		        }
		    });
	}
}

package ag.ifpb;

import java.math.BigInteger;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

public class Main {
	
	private static int[] extractKeys(String ks){
		String[] keys = ks.split(",");
		//check if array
		if (keys == null || keys.length != 3) 
			throw new IllegalArgumentException("As chaves são obrigatórias");
		//check if hex-string
		for (String k : keys) {
			if (!k.matches("[0-9a-f]{6}"))
				throw new IllegalArgumentException("Uma chave é representada por um hexadecimal de 6 digitos");
		}
		//convert hex to int
		int ix = 0;
		int[] kis = new int[3];
		for (String k : keys) {
			BigInteger bigInteger = new BigInteger(k);
			kis[ix++] = bigInteger.intValue();
		}
		return kis;
	}

	public static void main(String[] args) throws ParseException {
		//
		Options options = new Options();
		options.addOption("enc", false, "executa uma criptografia (default)");
		options.addOption("dec", false, "executa uma decriptografia (inválido se usar -enc)");
		options.addOption("ks", true, "lista de chaves de 6 digitos separadas por vírgula e sem espaço. "
				+ "Exemplo: 999999,111111,000000");
		//
		CommandLineParser parser = new DefaultParser();
		try {
			CommandLine cmd = parser.parse(options, args);
			//
			if (cmd.hasOption("ks")){
				validKeys(cmd.getOptionValue("ks"));
			}
			//
			//valids args and options
			boolean valids = false;
			//keys - validation
			String[] keys;
			if (cmd.hasOption("ks")){
				//
				

				//text - validation
				String text;
				if (!cmd.getArgList().isEmpty()){
					text = cmd.getArgList().get(0);
					
				} else {
					throw new IllegalArgumentException("Defina um texto para criptografar ou decriptografar");
				}
			} else {
				throw new IllegalArgumentException("Defina as chaves de criptografia");
			}
	    }
	    catch(ParseException exp ) {
	        System.err.println( "Linha de comando incorreta. Razão: " + exp.getMessage() );
	    }
		catch (IllegalArgumentException e) {
			System.err.println(e.getMessage());
		}
		//
		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("java -jar target/app.jar <options> text", options);
	}
	
}

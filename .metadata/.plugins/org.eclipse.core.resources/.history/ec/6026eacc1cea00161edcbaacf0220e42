package ag.ifpb.pod.ms;

import java.net.ServerSocket;
import java.net.Socket;
import java.util.UUID;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class Main {

	public static void main(String[] args) {
		//instanciar os elementos principais
		Register register = new Register();
		Notifier notifier = new Notifier(register);
		MessageManager manager = new MessageManager();
		TaskManager taskManager = new TaskManager(register, manager, notifier);
		//programar o background
		ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
		//excutar uma thread depois dos primeiros 2s e daí por diante a cada 5s.
		executor.scheduleAtFixedRate(taskManager, 2000, 5000, TimeUnit.MILLISECONDS);
		//
		ServerSocket serverSocket = new ServerSocket(10999);
		while(true){
			Socket clientSocket = serverSocket.accept();
			byte[] b = new byte[1024];
			clientSocket.getInputStream().read(b, 0, 1024);
			String textMessage = new String(b).trim();
			//recuperar a mensagem
			String publisherId;
			String subscriberId;
			String text;
			//persistir a mensagem
			String msgId = UUID.randomUUID().toString();
			Message message = new Message(msgId, publisherId, subscriberId, text);
			manager.publish(message);
			//informar ao publicador que a mensagem foi publicada
			clientSocket.getOutputStream().write("#OK#".getBytes());
			//encerrando a conexão
			clientSocket.close();
			
		}
		
	}
	
}

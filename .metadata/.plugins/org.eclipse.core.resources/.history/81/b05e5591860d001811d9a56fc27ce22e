package ag.protocol.impl;

import java.nio.ByteBuffer;

import ag.protocol.Frame;
import ag.protocol.FrameUnmarshaller;

public class FrameUnmarshallerImpl implements FrameUnmarshaller {

	@Override
	public Frame unmarshal(byte[] f) {
		//resultado
		Frame frame = new Frame();
		//extrair apenas os dois primeiros bits no byte
		int first = f[0] & 0xC0;
		int two = f[1];
		//verificar se é requisição
		int isReq = first & 0x80;
		if (isReq == 0x80){
			frame.setTypeAsRequest();
		} else {
			frame.setTypeAsResponse();
		}
		//verificar se é tipo texto
		int isText = first & 0x40;
		if (isText == 0x00){
			frame.setPayloadAsText();
		} else {
			frame.setPayloadAsBinary();
		}
		//capturando o tamanho
		int newfirst = fist << 2;
		int newtwo   = fist << 2;
		if (!f.isRequest()){//0 - req e 1 - resp
			first = 0x80; // 1000 0000
		}
		//colocar o valor no segundo bit do byte
		if (fram.isText()){//0 - b e 1 - t
			// 0100 0000 ->  0x40
			//operação é de AND ou de OR?
			first = 0x40 | first; //
		}
		//empurrar o first para criar espaço vazio
		first = first << 8;
		//colocar o valor no segundo byte
		int length = frame.getLength();
		length = length << 4; 
		//operar com OR
		int twobytes = first | length;
		//armazenar no buffer
		ByteBuffer buffer = ByteBuffer.allocate(frame.getLength()+2);
		buffer.put((byte) twobytes);
		buffer.put(frame.getPayload());
		//
		return buffer.array();
	}

}

import java.math.BigInteger;
import java.security.AlgorithmParameterGenerator;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyStore.SecretKeyEntry;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Base64.Encoder;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class DESDecoder {

	public static SecretKey key(String password) {
		KeyGenerator generator;
		try {
			generator = KeyGenerator.getInstance("DES");
			SecureRandom sec = new SecureRandom(password.getBytes());
			generator.init(sec);
			return generator.generateKey();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeySpecException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
		//
		SecretKeySpec keySpec = new SecretKeySpec("65432100".getBytes(), "DES");
		SecretKeyFactory factory = SecretKeyFactory.getInstance("DES");
		SecretKey secretKey = factory.generateSecret(keySpec);
		//
		Cipher cipher = Cipher.getInstance("DES");
		//
		cipher.init(Cipher.ENCRYPT_MODE, secretKey);
		byte[] ciphed;
		ciphed= cipher.doFinal("bzaqz anl!".getBytes());
		ciphed= cipher.doFinal(ciphed);
		ciphed= cipher.doFinal(ciphed);
		//
		Encoder encoder = Base64.getEncoder();
		byte[] encoded = encoder.encode(ciphed);
		//
		System.out.println(new String(encoded));
		
		//Cipher cipher = Cipher.getInstance("DES");
		//
		
//		//
//		cipher.init(Cipher.DECRYPT_MODE, secretKey);
//		//
//		Decoder decoder = Base64.getDecoder();
//		byte[] hex = decoder.decode("U2FsdGVkX1+Cl1MxcfmfCg8bue4H0Z43lca9M+nG03o=");
//		//
//		BigInteger bigInteger = new BigInteger(1, hex);
//		System.out.println(bigInteger.toString(16));
//		//
//		// byte[] b = cipher.doFinal(hex);
//		byte[] b = cipher.update(hex);
//		//
//		System.out.println(new String(b));
	}
}

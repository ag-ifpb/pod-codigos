package ag.proxyserver.reverse.impl;

import ag.proxyserver.CodeGenerator;
import ag.proxyserver.reverse.ReverseServer;
import ag.proxyserver.streamer.Stream;
import ag.proxyserver.streamer.StreamBinder;
import ag.proxyserver.streamer.StreamBinderManager;
import ag.proxyserver.tmp.WebCamCodeRepository;
import ag.proxyserver.tmp.WebCamException;
import ag.proxyserver.util.Util;

public class ReverseServerImpl implements ReverseServer {
	private final StreamBinderManager manager;
	//
	private String code = null;
	
	public ReverseServerImpl(StreamBinderManager manager) {
		this.manager = manager;
	}

	@Override
	public String register(String oldCode) throws WebCamException {
		//
		if (oldCode == null){
			String newCode = CodeGenerator.code();
			WebCamCodeRepository.add(newCode);
			return newCode;
		}
		//
		if (!WebCamCodeRepository.exists(oldCode)){
			throw new WebCamException(2002, "Código inexistente.");
		}
		//
		return oldCode;
	}

	@Override
	public String awaitCommand() throws WebCamException {
		if (code == null) throw new WebCamException(4000, "Erro ao aguardar o comando. Código inválido.");
		//
		StreamBinder binder = manager.getBinder(code);
		Stream stream = binder.getCommandStream();
		//
		return Util.readStream(stream);
	}

	@Override
	public void transferStreamToProxy(int byteStream) throws WebCamException {
		if (code == null) throw new WebCamException(5000, "Erro ao transferir dados do stream. Código inválido.");
		//
		StreamBinder binder = manager.getBinder(code);
		Stream stream = binder.getTransferStream();
		//
		stream.send(byteStream);
	}

}

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

import ag.proxyserver.Constants;
import ag.proxyserver.WebCamCodeGenerator;
import ag.proxyserver.WebCamCodeRepository;

public class WebCamProxyImpl extends Thread implements WebCamProxy {
	private final Socket socket;
	
	private String readMessageStream() throws IOException{
		//
		StringBuffer buffer = new StringBuffer();
		//
		while(true){
			//
			byte[] b = new byte[1];
			int r = 0;
			//
			r = socket.getInputStream().read(b);
			//
			if (r > 0){
				buffer.append(new String(b));
				if (buffer.toString().contains(Constants.END_TOKEN)){
					break;
				}
			}
		}
		//
		return buffer.toString().replace(Constants.END_TOKEN, "");
	}
	
	public WebCamProxyImpl(Socket socket) {
		this.socket = socket;
	}

	@Override
	public void register() {
		//recuperar o código do stream
		String code = readMessageStream();
		//verificar se o código é padrão ou existe
		if (Constants.WCCODE_MASK.equals(code)){
			//gerar novo código
			code = WebCamCodeGenerator.code();
			//salvar no repositório
			WebCamCodeRepository.add(code);
		}
		else {
			//verificar se o código já está registrado
			boolean exists = WebCamCodeRepository.exists(code);
			//gerar erro caso não esteja
			if (!exists) throw new IOException("Code error.");
		}
		//escrever o código aceito ou gerado
		String msg = code + Constants.END_TOKEN;
		socket.getOutputStream().write(msg.getBytes());
	}

	@Override
	public void awaitCommand() {
		// TODO Auto-generated method stub

	}

	@Override
	public void play() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void stopWebCam() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void transferStream(OutputStream output) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void run() {
		register();
		awaitCommand();
	}

}

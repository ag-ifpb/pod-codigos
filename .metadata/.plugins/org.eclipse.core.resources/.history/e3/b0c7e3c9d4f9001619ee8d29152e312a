import java.lang.reflect.Executable;
import java.util.Timer;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.SynchronousQueue;

public class Engine {
	private IncomingManager manager;
	private Attendante attendante;
	private Queue queue;
	
	//
	private Thread t0 = null;
	private boolean fim = false;
	
	//
	private void printAll(){
		System.out.println("Quantidade de pessoas que chegaram: " + manager.count());
		System.out.println("Quantidade de pessoas que foram embora: " + manager.fail());
		System.out.println("Quantidade de pessoas na fila: " + queue.size());
		System.out.println("Quantidade de pessoas atendidas: " + attendante.count());
	}
	
	
//	//temporizador
//	thread t0 {
//	  set timef = 0
//	  set time0 = 0
//	  loop{
//	    set time1 = currentTime
//	    if (time1 - time0 >= 1){
//	      timef++
//	      time0 = time1
//	      notifyAll()//passou um segundo
//	    }
//	    if (timef == 89)
//	      fim = true
//	    if (timef == 90){
//	      printAll()//imprime todos os valores
//	      break
//	    }
//	  }
//	}
	private void temporizador(){
		Runnable r0 = new Runnable() {
			@Override
			public void run() {
				long timef = 0;
				long time0 = 0;
				while(true){
					long time1 = System.currentTimeMillis();
					if (time1 - time0 >= 1){
						timef++;
						time0 = time1;
						t0.notifyAll();
					}
					if(timef == 89){
						fim = true;
					}
					if(timef == 90){
						printAll();
						break;
					}
				}
			}
		};
		//
		t0 = new Thread(r0);
		t0.start();
	}
	
//	//gerenciador de entrada
//	thread t1 {
//	  set time = 0
//	  loop (fim == false){
//	    t0.wait()
//	    if (++time == 3s){
//	      t11 { manager.exec() }//pressupoe que o time < 1s
//	      time = 0
//	    }
//	  }
//	}
	private void gerenciadorDeEntrada(){
		Runnable r1 = new Runnable() {
			@Override
			public void run() {
				int time = 0;
				while(fim == false){
					//
					synchronized (t0) {
						try {
							t0.wait();
						} 
						catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					//
					if (++time == 3){
						manager.exec();
					}
				}
				
			}
		};
		
	}

	public void exec(){
		//
		boolean _continue = true;
		//isto ocorre depois dos primeiros 3s
		if (_continue){
			manager.exec();//t3
		}
		//
		while(_continue){//<--90.000
			if (!queue.isEmpty()){//90.00001s
				//thread{
					attendante.startService();//t1//90.0009
					//aguardar dois segundos sleep()
					attendante.stopService();//t2//92.0018
				//}
			}
		}
		//
		//print (time) <--92.
	}
	
}

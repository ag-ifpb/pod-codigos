import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class StreamServer {
	
	private static void result206(Socket socket, FileInputStream finput, int offset, int length) throws IOException{
		//
		String contentRange = new StringBuffer()
				.append("Content-Range:bytes ")
				.append(offset)
				.append("-")
				.append(length - 1)
				.append("/")
				.append(length)
				.toString();
		//
		OutputStream output = socket.getOutputStream();
		output.write("HTTP/1.1 206 Partial Content\r\n".getBytes());
		output.write((contentRange + "\r\n").getBytes());
		output.write(("Content-Length: "+ length + "\r\n").getBytes());
		output.write("Content-Type: video/mp4\r\n".getBytes());
		output.write("Accept-Ranges: bytes\r\n".getBytes());
		output.write("Server: euserver\r\n".getBytes());
		output.write("Connection: keep-alive\r\n".getBytes());
		output.write(("ETag: \"1913579-" + System.currentTimeMillis() + "\"\r\n").getBytes());
		output.write("Date: Thu, 23 Mar 2017 20:13:25 GMT\r\n".getBytes());
		output.write("Cache-Control: public, max-age=0\r\n".getBytes());
		output.write("Last-Modified: Tue, 21 Feb 2017 06:51:18 GMT\r\n\r\n".getBytes());
		//
		int cursor = offset;
		int totalReceived = 0;
		int partialReceived = 0;
		long remaining = length - offset;
		//
		byte[] b = new byte[1024];
		//
		while(true){
			//
			partialReceived = finput.read(b, cursor, 1024);
			//
			if (partialReceived > 0){
				output.write(b);
				output.flush();
				totalReceived += partialReceived;
				cursor += partialReceived;
			}
			//
			if (remaining - totalReceived == 0){
				break;
			}
		}
		//
		output.close();
	}
	
	private static void result200(Socket socket, FileInputStream finput, int offset, int length) throws IOException{
		OutputStream output = socket.getOutputStream();
		output.write("HTTP/1.1 200 OK\r\n".getBytes());
		output.write(("Content-Length: "+ length + "\r\n").getBytes());
		output.write("Content-Type: video/mp4\r\n".getBytes());
		output.write("Accept-Ranges: bytes\r\n".getBytes());
		output.write("Server: euserver\r\n".getBytes());
		output.write("Connection: keep-alive\r\n".getBytes());
		output.write(("ETag: \"1913579-" + System.currentTimeMillis() + "\"\r\n").getBytes());
		output.write("Date: Thu, 23 Mar 2017 20:13:25 GMT\r\n".getBytes());
		output.write("Cache-Control: public, max-age=0\r\n".getBytes());
		output.write("Last-Modified: Tue, 21 Feb 2017 06:51:18 GMT\r\n\r\n".getBytes());
		//
		int cursor = offset;
		int totalReceived = 0;
		int partialReceived = 0;
		long remaining = length - offset;
		//
		byte[] b = new byte[1024];
		//
		while(true){
			//
			partialReceived = finput.read(b, cursor, 1024);
			//
			if (partialReceived > 0){
				output.write(b);
				output.flush();
				totalReceived += partialReceived;
				cursor += partialReceived;
			}
			//
			if (remaining - totalReceived == 0){
				break;
			}
		}
		//
		output.close();
	}
	
	private static void requestResolver(Socket socket, FileInputStream finput, int fsize) throws IOException{
		InputStreamReader reader = new InputStreamReader(socket.getInputStream());
		BufferedReader bufferedReader = new BufferedReader(reader);
		while(true){
			String line = bufferedReader.readLine();
			if (line.contains("Upgrade-Insecure-Requests: 1")){
				result200(socket, finput, 0, fsize);
			}
			else if (line.contains("Rangers: bytes=")){
				String offset_string = line.replace("Rangers: bytes=", "").replace("-", "");
				int offset = Integer.parseInt(offset_string);
				result206(socket, finput, offset, fsize - offset);
			}
		}
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		//
		ServerSocket serverSocket = new ServerSocket(10999);
		//
		while(true){
			//
			try {
				//
				Socket socket = serverSocket.accept();
				//1st part
				File file = new File("preview-app-iphone.mp4");
				FileInputStream finput = new FileInputStream(file);
				//
				requestResolver(socket, finput, file.length());
				//
				finput.close();
				socket.close();
				//
				System.out.println("Enviado: " + total);
			}
			catch(IOException e){
				e.printStackTrace();
				continue;
			}
			//
			
		}
		//serverSocket.close();
	}
}

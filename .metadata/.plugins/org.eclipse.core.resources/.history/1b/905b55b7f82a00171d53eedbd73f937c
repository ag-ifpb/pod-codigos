package ag.proxyserver.reverse.impl;

import java.io.ByteArrayOutputStream;
import java.util.Arrays;

import ag.proxyserver.reverse.ReverseServer;
import ag.proxyserver.streamer.Stream;
import ag.proxyserver.streamer.StreamBinder;
import ag.proxyserver.streamer.StreamBinderManager;
import ag.proxyserver.tmp.Constants;
import ag.proxyserver.tmp.WebCamCodeGenerator;
import ag.proxyserver.tmp.WebCamCodeRepository;
import ag.proxyserver.tmp.WebCamException;

public class ReverseServerImpl implements ReverseServer {
	private final StreamBinderManager manager;
	//
	private String code = null;
	
	public ReverseServerImpl(StreamBinderManager manager) {
		this.manager = manager;
	}

	@Override
	public String register(String oldCode) throws WebCamException {
		//
		if (oldCode == null){
			String newCode = WebCamCodeGenerator.code();
			WebCamCodeRepository.add(newCode);
			return newCode;
		}
		//
		if (!WebCamCodeRepository.exists(oldCode)){
			throw new WebCamException(2002, "Código inexistente.");
		}
		//
		return oldCode;
	}

	@Override
	public String awaitCommand() throws WebCamException {
		if (code == null) throw new WebCamException(4000, "Erro ao aguardar o comando. Código inválido.");
		//
		StreamBinder binder = manager.getBinder(code);
		Stream stream = binder.getCommandStream();
		//
		boolean eof = false;
		ByteArrayOutputStream bufferFull = new ByteArrayOutputStream();
		do {
			//read stream
			int nextByte = stream.recv();
			bufferFull.write(nextByte);
			//received++;
			//check if ended
			byte[] data = bufferFull.toByteArray();
			byte[] last = Arrays.copyOfRange(
					data, data.length - 13, data.length
			);
			String tmp = new String(last);
			if (Constants.END_TOKEN.equals(tmp)){
				eof = true;
			}
			//
		} while(!eof);
		//
		byte[] data = bufferFull.toByteArray();
		byte[] comm = Arrays.copyOfRange(
				data, 0, data.length - 13
		);
		//
		return new String(comm);
	}

	@Override
	public void transferStreamToProxy(int byteStream) throws WebCamException {
		if (code == null) throw new WebCamException(5000, "Erro ao transferir dados do stream. Código inválido.");
		//
		StreamBinder binder = manager.getBinder(code);
		Stream stream = binder.getTransferStream();
		//
		stream.send(byteStream);
	}

}

import java.math.BigInteger;
import java.security.AlgorithmParameterGenerator;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyStore.SecretKeyEntry;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.util.Base64;
import java.util.Base64.Decoder;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class DESDecoder {

	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
		//desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		Cipher cipher = Cipher.getInstance("DES");
		//
		//DESKeySpec keySpec = new DESKeySpec(key)
		SecretKeySpec keySpec = new SecretKeySpec("65432100".getBytes(), "DES");
		SecretKeyFactory factory = SecretKeyFactory.getInstance("DES");
		SecretKey secretKey = factory.generateSecret(keySpec);
		//
		cipher.init(Cipher.DECRYPT_MODE, secretKey);
		//
		Decoder decoder = Base64.getDecoder();
		byte[] hex = decoder.decode("U2FsdGVkX1+Cl1MxcfmfCg8bue4H0Z43lca9M+nG03o=");
		//
		BigInteger bigInteger = new BigInteger(1, hex);
		System.out.println(bigInteger.toString(16));
		//
		byte[] b = cipher.doFinal(hex);
		//
		System.out.println(new String(b));
	}
}

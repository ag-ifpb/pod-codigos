package ag;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Responsável ler e escrever mensagens
 * no repositório. Além disso deve excluir 
 * todas as mensagens que foram entregues.
 * 
 * Relacionar as mensagens de requisição e
 * de resposta.
 * 
 * Obs.: criar um arquivo .lock antes de 
 * ler/escrever o arquivo de mensagens.
 * 
 * @author arigarcia
 *
 */
public class MessageManager {
//	private final RepositoryLocator locator;
	
	private String read(File file) throws FileNotFoundException, IOException{
		FileInputStream input = new FileInputStream(file);
		byte[] b = new byte[1024];
		input.read(b);
		input.close();
		String msg = new String(b);
		return msg.trim();
	}
	
	private void write(File file, String msg) throws FileNotFoundException, IOException{
		FileOutputStream output = new FileOutputStream(file, true);
		String formatted_msg = msg + "\r\n"; 
		output.write(msg.getBytes());
		output.close();
	}
	
	private void remove(File file, String msg) throws FileNotFoundException, IOException{
		//criando um canal de leitura e escrita (em memória)
		FileInputStream input = new FileInputStream(file);
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		//recuperar o buffer para leitura linha-a-linha
		InputStreamReader reader = new InputStreamReader(input);
		BufferedReader bufferedReader = new BufferedReader(reader);
		//fazer a leitura de cada linha
		String line;
		while ((line = bufferedReader.readLine()) != null){
			//
			System.out.println("linha: "+ line);
			System.out.println("linha=msg: "+ line.equals(msg));
			System.out.println("linha=msg\\r\\n: "+ line.equals(msg + "\r\n"));
			//verifica se a linha corresponde a mensage
			if (line.equals(msg)){
				continue;//desprezar, caso corresponda
			}
			//escreve na memória a linha
			String remsg = line + "\r\n";
			output.write(remsg.getBytes());
		}
		//encerrar o canal de leitura do arquivo
		reader.close();
		input.close();
		//abrir o canal de escrita do arquivo
		FileOutputStream foutput = new FileOutputStream(file);
		//escrever no arquivo o que estava em memória
		output.writeTo(foutput);
		//encerrar a memória
		output.close();
		//encerrar o canal de escrita do arquivo
		foutput.close();
	}
	
//	private String convert(Message msg){
//		
//	}
//	
//	private Message convert(String msg){
//		
//	}
	
	public static void main(String[] args) throws FileNotFoundException, IOException {
		File file = new File("teste.txt");
		MessageManager m = new MessageManager();
		m.write(file, "Hello0");
		m.write(file, "Hello1");
		m.write(file, "Hello2");
		m.write(file, "Hello3");
		System.out.println(m.read(file));
		m.remove(file, "Hello2");
		System.out.println(m.read(file));
	}
	
	
}

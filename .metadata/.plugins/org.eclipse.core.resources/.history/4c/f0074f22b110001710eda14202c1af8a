import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class StreamServer {
	
	private static int result200Or206(FileInputStream finput, int offset, int endset,
			OutputStream output) throws IOException {
		//
		output.write(("Content-Length: "+ (endset - offset + 1) + "\r\n").getBytes());
		output.write("Content-Type: video/mp4\r\n".getBytes());
		output.write("Accept-Ranges: bytes\r\n".getBytes());
		output.write("Server: euserver\r\n".getBytes());
		output.write("Connection: keep-alive\r\n".getBytes());
		output.write(("ETag: \"1913579-" + System.currentTimeMillis() + "\"\r\n").getBytes());
		output.write("Date: Thu, 23 Mar 2017 20:13:25 GMT\r\n".getBytes());
		output.write("Cache-Control: public, max-age=0\r\n".getBytes());
		output.write("X-Playback-Session-Id: BEADC162-C4B7-453C-B408-D48E24E31B8E\r\n".getBytes());
		output.write("Last-Modified: Tue, 21 Feb 2017 06:51:18 GMT\r\n\r\n".getBytes());
		//
		int totalReceived = 0;
		int partialReceived = 0;
		long remaining = endset - offset + 1;
		//
		int bsize = (remaining < 1024? (int) remaining : 1024);
		byte[] b = new byte[bsize];
		//
		System.out.println("------------------");
		finput.skip(offset);
		System.out.println("Salto: " + offset);
		while(true){
			//
			System.out.println(totalReceived + " " + remaining);
			//
			partialReceived = finput.read(b, 0, bsize);
			//
			if (partialReceived > 0){
				output.write(b);
				output.flush();
				totalReceived += partialReceived;
			}
			//
			if (remaining - totalReceived <= 0){
				break;
			}
		}
		//
		output.close();
		//
		return totalReceived;
	}
	
	private static int result206(Socket socket, FileInputStream finput, int offset, int endset, int length) throws IOException{
		//
		System.out.println("Iniciando 206");
		//
		String contentRange = new StringBuffer()
				.append("Content-Range:bytes ")
				.append(offset)
				.append("-")
				.append(endset)
				.append("/")
				.append(length)
				.toString();
		//
		OutputStream output = socket.getOutputStream();
		output.write("HTTP/1.1 206 Partial Content\r\n".getBytes());
		output.write((contentRange + "\r\n").getBytes());
		return result200Or206(finput, offset, endset, output);
	}

	
	
	private static int result200(Socket socket, FileInputStream finput, int offset, int endset, int length) throws IOException{
		//preparar o cabeçalho de retorno (resposta)
		OutputStream output = socket.getOutputStream();
		output.write("HTTP/1.1 200 OK\r\n".getBytes());
		output.write(("Content-Length: "+ length + "\r\n").getBytes());
		output.write("Content-Type: video/mp4\r\n".getBytes());
		output.write("Accept-Ranges: bytes\r\n".getBytes());
		output.write("Server: euserver\r\n".getBytes());
		output.write("Connection: keep-alive\r\n".getBytes());
		output.write(("ETag: \"1913579-" + System.currentTimeMillis() + "\"\r\n").getBytes());
		output.write("Date: Thu, 23 Mar 2017 20:13:25 GMT\r\n".getBytes());
		output.write("Cache-Control: public, max-age=0\r\n".getBytes());
		output.write("Last-Modified: Tue, 21 Feb 2017 06:51:18 GMT\r\n\r\n".getBytes());
		//
		return result200Or206(finput, offset, endset, output);
	}
	
	private static int requestResolver(Socket socket, FileInputStream finput, long fsize) throws IOException{
		//ler o stream do socket
		InputStreamReader reader = new InputStreamReader(socket.getInputStream());
		BufferedReader bufferedReader = new BufferedReader(reader);
		//looping para recuperar e resolver linha a linha
		while(true){
			//recuperar a linha e imprimir a linha
			String line = bufferedReader.readLine();
			System.out.println(line);
			//
			if (line == null){
				return -1;
			}
			else if (line.isEmpty() || line.contains("Upgrade-Insecure-Requests: 1")){
				return result200(socket, finput, 0,  (int) fsize-1, (int) fsize);
			}
			else if (line.contains("Range: bytes=")){//Range: bytes=123123-
				String range = line.replace("Range: bytes=", "");
				String[] ranges = range.split("-");
				if (ranges.length > 1){
					int offset = Integer.parseInt(ranges[0]);
					int endset = Integer.parseInt(ranges[1]);
					return result206(socket, finput, offset, endset, (int) fsize);
				}
				else {
					int offset = Integer.parseInt(ranges[0]);
					int endset = (int) fsize - 1;
					return result206(socket, finput, offset, endset, (int) fsize);
				}
			}
		}
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		//número da conexão (controle meu)
		int conn = 0;
		//inicialização do servidor (socket)
		ServerSocket serverSocket = new ServerSocket(10999);
		//looping para mais de uma conexão
		while(true){
			//total de bytes transferidos(respondidos) para a requisição
			int total = 0;
			//inicializando varáveis
			Socket socket = null;//socket (client)
			FileInputStream finput = null;// file (arquivo mp4)
			try {
				//aguardando a conexão
				socket = serverSocket.accept();
				//carregar o arquivo
				File file = new File("preview-app-iphone.mp4");
				finput = new FileInputStream(file);
				//resolve a requisição
				//passando o socket, stream do arquivo e tamanho do arquivo
				//recebendo o total que foi resolvido (respondido)
				total = requestResolver(socket, finput, file.length());
			}
			catch(IOException e){
				e.printStackTrace();//eu quero saber o erro...
			}
			finally {
				//log
				System.out.println("Enviado: " + total);
				System.out.println("Conexão encerrada: " + (conn++) + ".");
				//
				if (socket != null) socket.close();
				if (finput != null) finput.close();
			}
		}
		//
		//serverSocket.close();
	}
}

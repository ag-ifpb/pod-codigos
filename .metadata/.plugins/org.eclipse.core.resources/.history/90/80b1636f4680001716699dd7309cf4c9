package ag.ifpb;

import java.math.BigInteger;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

public class Main {
	
	private static int[] extractKeys(String ks){
		String[] keys = ks.split(",");
		//check if array
		if (keys == null || keys.length != 3) 
			throw new IllegalArgumentException("As chaves são obrigatórias");
		//check if hex-string
		for (String k : keys) {
			if (!k.matches("[0-9a-f]{6}"))
				throw new IllegalArgumentException("Uma chave é representada por um hexadecimal de 6 digitos");
		}
		//convert hex to int
		int ix = 0;
		int[] kis = new int[3];
		for (String k : keys) {
			BigInteger bigInteger = new BigInteger(k);
			kis[ix++] = bigInteger.intValue();
		}
		return kis;
	}
	
	private static String extractText(String args0){
		String text = args0;
		if (text.isEmpty()){
			throw new IllegalArgumentException("Digite o texto a ser criptografado ou correspondente a uma cifra");
		}
		return text;
	}
		
	private static String extractType(String type) {
		if (!type.matches("[cd]{3}"))
			throw new IllegalArgumentException("Uma chave é representada por um hexadecimal de 6 digitos");
		return type;
	}
		
	private static void execEncryptation(String type, int[] ks, String text) {
		// TODO Auto-generated method stub
		System.out.println("encriptando: " + text);
	}

	private static void execDecryptation(String type, int[] ks, String text) {
		// TODO Auto-generated method stub
		System.out.println("decriptando: " + text);
	}

	public static void main(String[] args) throws ParseException {
		//
		Options options = new Options();
		options.addOption("enc", false, "executa uma criptografia (default)");
		options.addOption("dec", false, "executa uma decriptografia (inválido se usar -enc)");
		options.addOption("type", false, "digite uma das opções: ccd, cdc, dcc, ddc, dcd, cdd");
		options.addOption("ks", true, "lista de chaves de 6 digitos separadas por vírgula e sem espaço. "
				+ "Exemplo: 999999,111111,000000");
		//
		CommandLineParser parser = new DefaultParser();
		try {
			CommandLine cmd = parser.parse(options, args);
			//keys
			int[] ks;
			if (cmd.hasOption("ks")){
				ks = extractKeys(cmd.getOptionValue("ks"));
			} else {
				throw new IllegalArgumentException("Chamada com formato inválido. Faltando opção '-ks'");
			}
			//text
			String text;
			if (!cmd.getArgList().isEmpty()){
				text = extractText( cmd.getArgList().get(0));
			} else {
				throw new IllegalArgumentException("Chamada com formato inválido. Faltando argumento 'text'");
			}
			//type
			String type;
			if (cmd.hasOption("type")){
				type = extractType(cmd.getOptionValue("type"));
			} else {
				throw new IllegalArgumentException("Chamada com formato inválido. Faltando opção '-type'");
			}
			//dec
			if (cmd.hasOption("dec") && cmd.hasOption("enc")){
				execDecryptation(type, ks, text);
			} else {
				execEncryptation(type, ks, text);
			}
	    }
	    catch(ParseException exp ) {
	        System.err.println( "Linha de comando incorreta. Razão: " + exp.getMessage() );
	    }
		catch (IllegalArgumentException e) {
			System.err.println(e.getMessage());
		}
		//
		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("java -jar target/app.jar <options> text", options);
	}

	

	
	
}

package ag.ifpb.service;

import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public abstract class Searcher implements Observer{
	private final StrategyFactory strategyFactory;
	private boolean success = false;
	
	private EncriptionType nextType(){
		int typeOrd = (int) (Math.random() * 6);
		return EncriptionType.values()[typeOrd];
	}
	
	private int[] nextKeys(EncriptionType type){
		//
		int[] result = new int[3];
		//
		switch (type) {
			case CCD:
				result[0] = genCesarKey();
				result[1] = genCesarKey();
				result[2] = genDESKey();
				break;
			case CDC:
				result[0] = genCesarKey();
				result[2] = genCesarKey();
				result[1] = genDESKey();
				break;
			case DCC:
				result[1] = genCesarKey();
				result[2] = genCesarKey();
				result[0] = genDESKey();
				break;
			case DDC:
				result[0] = genDESKey();
				result[1] = genDESKey();
				result[2] = genCesarKey();
				break;
			case DCD:
				result[0] = genDESKey();
				result[2] = genDESKey();
				result[1] = genCesarKey();
				break;
			case CDD:
				result[1] = genDESKey();
				result[2] = genDESKey();
				result[0] = genCesarKey();
				break;
		}
		//
		return result;
	}
	
	protected abstract int genCesarKey();
	
	protected abstract int genDESKey();
	
	public Searcher(StrategyFactory strategyFactory) {
		this.strategyFactory = strategyFactory;
	}
	
	@Override
	public void update(Observable o, Object arg) {
		success = true;
	}
	
	public void start(String text){
		//setup - pode ser configur√°vel
		int iterMax = 1000000;
		int threMax = 10;
		//criando um pool de threads fixo 
		ExecutorService service = Executors.newFixedThreadPool(threMax);
		//iniciado as tarefas
		for (int cnt = 0; cnt < iterMax; cnt++) {
			//
			if (success) {
				break;
			}
			//
			EncriptionType type = nextType();
			int[] ks = nextKeys(type);
			//
			Strategy strategy = strategyFactory.strategy(type);
			//
			Worker worker = new Worker(strategy, ks, text);
			service.execute(worker);
		}
	}
	
}
